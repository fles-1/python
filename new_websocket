from websocket_server import WebsocketServer

import websocket
import gzip
import json
import time
import requests
import threading


clients = []  # 客户端列表对象


dict_ws = {
    'Abby.Global': 'wss://ws.abby.global/kline-api/ws', 'BitSG': 'wss://ws.bitsg.com/kline-api/ws',
    'BDDEx': 'wss://ws.bddex.io/kline-api/ws', 'BiKi': 'wss://ws.biki.com/kline-api/ws',
    'BZEX': 'wss://ws.bzex.co/kline-api/ws', 'DXD': 'wss://ws.dxdcoin.com/kline-api/ws',
    'IMOEX': 'wss://ws.imoex.top/kline-api/ws', 'WBFex': 'wss://ws.wbf.io/kline-api/ws',
    'MOMO': 'wss://ws.momoex.com/kline-api/ws', 'GOKO': 'wss://ws.goko.com/kline-api/ws',
    'BTBO': 'wss://ws.btbo.com/kline-api/ws', 'BBKX': 'wss://ws.bbkx.com/kline-api/ws',
    'HKEx.one': 'wss://ws.hkex.one/kline-api/ws', 'Biiit': 'wss://ws.biiit.com/kline-api/ws',
    'FFEX': 'wss://ws.ffex.pro/kline-api/ws'}

# 各交易所api字典对象，用于获取交易所所有交易对
dict_api = {
    'Abby.Global': 'https://openapi.abby.global/open/api/common/symbols',
    'BitSG': 'https://openapi.bitsg.com/open/api/common/symbols',
    'BDDEx': 'https://openapi.bddex.io/open/api/common/symbols',
    'BiKi': 'https://openapi.biki.com/open/api/common/symbols',
    'BZEX': 'https://openapi.bzex.co/open/api/common/symbols',
    'DXD': 'https://openapi.dxdcoin.com/open/api/common/symbols',
    'IMOEX': 'https://openapi.imoex.top/open/api/common/symbols',
    'WBFex': 'https://openapi.wbf.io/open/api/common/symbols',
    'MOMO': 'https://openapi.momoex.com/open/api/common/symbols',
    'GOKO': 'https://openapi.goko.com/open/api/common/symbols',
    'BTBO': 'https://openapi.btbo.com/open/api/common/symbols',
    'BBKX': 'https://openapi.bbkx.com/open/api/common/symbols',
    'HKEx.one': 'https://openapi.hkex.one/open/api/common/symbols',
    'Biiit': 'https://openapi.biiit.com/open/api/common/symbols',
    'FFEX': 'https://openapi.ffex.pro/open/api/common/symbols'}

kline_list = ['1min', '5min', '15min', '30min', '60min', '1day', '1week', '1month']


def get_symbol(api):
    res = requests.get(api).text
    data_dict = json.loads(res)
    return data_dict['data']


lock = threading.Lock()


def muti_kline_ex():
    for ex in dict_ws.keys():
        get_kline(ex, '*', '*')


def muti_ticker_ex():
    for ex in dict_ws.keys():
        get_ticker(ex, '*')


def get_kline(url_ws, symbol, interval):
    # asyncio.set_event_loop(asyncio.new_event_loop())
    # 获取websocket的k线symbol=btcusdt,interval=1min
    lock.acquire()
    ws = websocket.WebSocket()
    lock.release()
    try:
        ws.connect(dict_ws[url_ws])

        if symbol == "*":
            if interval == '*':
                for inter in kline_list:
                    for d in get_symbol(dict_api[url_ws]):
                        ws.send(
                            '{"event":"sub","params":'
                            '{"channel":"market_%s_kline_%s","cb_id":1001}}' % (d['symbol'], inter))
        else:
            symbol_list = symbol.split(',')
            for d in symbol_list:
                ws.send(
                    '{"event":"sub","params":{"channel":"market_%s_kline_%s","cb_id":1001}}' % (d, interval))
    except Exception as e:
        print(e)
    # threading.Thread(target=get_kline_data, args=(ws, url_ws)).start()


def get_kline_data(ws, url_ws):
    while True:
        result = ws.recv()
        data = gzip.decompress(result).decode('utf8')
        if 'ping' in json.loads(data):
            ws.send(json.dumps({"pong": json.loads(data)["ping"]}))
        else:
            data = json.loads(data)
            data_channel = data['channel']
            sym = data_channel[7:][:data_channel[7:].find('_')]
            interval_ = data_channel[(data_channel.rfind('_')+1):]
            data['data'] = data.pop('tick')
            data['data']['tmp'] = data['data']['amount']
            data['data']['amount'] = data['data'].pop('vol')
            data['data']['volume'] = data['data'].pop('tmp')

            time_array = time.strptime(data['data']['ds'], "%Y-%m-%d %H:%M:%S")
            del data['data']['id']
            del data['data']['tradeId']
            del data['data']['ds']
            timestamp = int(time.mktime(time_array))
            data['data']['timestamp'] = timestamp
            data['data']['count'] = 0
            data['data']['exchangeCode'] = url_ws

            dic = {"data": data["data"]}

            last_data = {"data": dic, "interval": interval_, "symbol": sym, "rate": 0, "timestamp": data['ts']}
            for c in clients:
                server.send_message(c, json.dumps(last_data))

            # yield json.dumps(last_data)
            # yield data


def get_ticker_data(ws, url_ws):
    while True:
        result = ws.recv()
        data = gzip.decompress(result).decode('utf8')
        if 'ping' in json.loads(data):
            ws.send(json.dumps({"pong": json.loads(data)["ping"]}))
        else:
            data = json.loads(data)
            data_channel = data['channel']
            sym = data_channel[7:][:data_channel[7:].find('_')]
            data['data'] = data.pop('tick')
            data['data']['volume'] = data['data'].pop('vol')
            data['data']['exchangeCode'] = url_ws
            dic = {"data": data["data"]}

            data = {"data": dic,  "symbol": sym, "rate": 0, "timestamp": data['ts']}
            for c in clients:
                server.send_message(c, json.dumps(data))
            # yield json.dumps(data)


def get_ticker(url_ws, symbol):

    # 获取websocket的前24小时交易对行情symbol=btcusdt
    lock.acquire()
    ws = websocket.WebSocket()
    lock.release()
    try:
        ws.connect(dict_ws[url_ws])
        if symbol == "*":
            for d in get_symbol(dict_api[url_ws]):
                ws.send('{"event":"sub","params":{"channel":"market_%s_ticker","cb_id":1001}}' % d['symbol'])
        else:
            symbol_list = symbol.split(',')
            for d in symbol_list:
                ws.send('{"event":"sub","params":{"channel":"market_%s_ticker","cb_id":1001}}' % d)

    except Exception as e:
        print('error%s' % e)
    threading.Thread(target=get_ticker_data, args=(ws, url_ws)).start()
# for i in get_ticker("abqqex", "btcusdt"):
#     print(i)


t1 = threading.Thread(target=muti_kline_ex)
t1.start()

t2 = threading.Thread(target=muti_ticker_ex)
t2.start()


def get_trade(url_ws, symbol):
    # 获取websocket的实时成交信息symbol=btc_usdt
    ws = websocket.WebSocket()
    try:
        ws.connect(dict_ws[url_ws])
        if symbol == "*":
            for d in get_symbol(dict_api[url_ws]):
                ws.send('{"event":"sub","params":{"channel":"market_%s_trade_ticker","cb_id":1001}}' % d['symbol'])
        else:
            symbol_list = symbol.split(',')
            for d in symbol_list:
                ws.send('{"event":"sub","params":{"channel":"market_%s_trade_ticker","cb_id":1001}}' % d)

    except Exception as e:
        print(e)
    while True:
        result = ws.recv()
        data = gzip.decompress(result).decode('utf8')
        if 'ping' in json.loads(data):
            ws.send(json.dumps({"pong": json.loads(data)["ping"]}))
        else:
            data = json.loads(data)
            data_channel = data['channel']
            sym = data_channel[7:][:data_channel[7:].find('_')]
            for v in data['tick']["data"]:
                # print(v)
                del v["ds"]
                del v["vol"]
                v["direction"] = v.pop("side")
                v["timestamp"] = v.pop("ts")
                v["tradeId"] = v.pop("id")
            da = {"data": {"symbol": sym, "timestamp": data["ts"], "rate": 0, "tradeList": data["tick"]["data"]}}
            yield json.dumps(da)
            # yield data
# for i in get_trade('abqqex', 'btcusdt'):
#     print(i)


def get_depth(url_ws, symbol, step):
    # 获取websocket的深度盘口symbol=btc_usdt,step=step0 |1 |2
    ws = websocket.WebSocket()
    try:
        ws.connect(dict_ws[url_ws])
        if symbol == "*":
            for d in get_symbol(dict_api[url_ws]):
                ws.send('{"event":"sub","params":{"channel":"market_%s_depth_%s","cb_id":1001}}' % (d['symbol'], step))
        else:
            symbol_list = symbol.split(',')
            for d in symbol_list:
                ws.send('{"event":"sub","params":{"channel":"market_%s_depth_%s","cb_id":1001}}' % (d, step))

    except Exception as e:
        print(e)
    while True:
        result = ws.recv()
        data = gzip.decompress(result).decode('utf8')
        # print(data)
        if 'ping' in json.loads(data):
            # print(json.dumps({"pong": json.loads(data)["ping"]}))
            ws.send(json.dumps({"pong": json.loads(data)["ping"]}))
        else:
            data = json.loads(data)
            data_channel = data['channel']
            sym = data_channel[7:][:data_channel[7:].find('_')]
            lis_asks = []
            lis_bids = []
            for v in data['tick']['asks']:
                x = {"amount": v[1], "price": v[0]}
                lis_asks.append(x)
                data['tick']['asks'] = x
            for v in data['tick']['buys']:
                x = {"amount": v[1], "price": v[0]}
                data['tick']['buys'] = x
                lis_bids.append(x)
            da = {"data": {"data": {"asks": lis_asks, "bids": lis_bids, "timestamp": time.time()}, "symbol": sym,
                           "timestamp": time.time(), "type": step, "rate": 0}}
            yield json.dumps(da)
            # yield data

# for i in get_depth("btcusdt", "step0"):
#     print(i)


# Called for every client connecting (after handshake)
def new_client(client, server):
    print("New client connected and was given id %d" % client['id'])
    #server.send_message_to_all("a new client...")
    clients.append(client)
    # server.send_message(client,"请问有什么可以帮到您？")


# Called for every client disconnecting
def client_left(client, server):
    clients.remove(client)
    print("Client(%d) disconnected" % client['id'])


# Called when a client sends a message
def message_received(client, server, message):
    if len(message) > 200:
            message = message[:200]+'..'
    print("Client(%d)_address%s said: %s" % (client['id'],client['address'], message))
    server.send_message(client,'用户编号'+str(client['id'])+':'+message)


PORT = 1109
server = WebsocketServer(PORT, host="0.0.0.0")
server.set_fn_new_client(new_client)
server.set_fn_client_left(client_left)
server.set_fn_message_received(message_received)
server.run_forever()
